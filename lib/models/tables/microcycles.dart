//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Microcycles Table
class MicrocyclesTable extends SupabaseTable<MicrocyclesRow> {
  /// Table Name
  @override
  String get tableName => 'microcycles';

  /// Create a [MicrocyclesRow] from the [data] provided
  @override
  MicrocyclesRow createRow(Map<String, dynamic> data) =>
      MicrocyclesRow.fromJson(data);
}

/// Microcycles Row
class MicrocyclesRow extends SupabaseDataRow {
  /// Microcycles Row
  MicrocyclesRow({
    required String programmaId,
    required String titolo,
    required DateTime dataInizio,
    required DateTime dataFine,
    String? microcicloId,
    String? descrizione,
  }) : super({
          'programma_id': supaSerialize(programmaId),
          'titolo': supaSerialize(titolo),
          'data_inizio': supaSerialize(dataInizio),
          'data_fine': supaSerialize(dataFine),
          if (microcicloId != null)
            'microciclo_id': supaSerialize(microcicloId),
          if (descrizione != null) 'descrizione': supaSerialize(descrizione),
        });

  /// Microcycles Row
  const MicrocyclesRow._(super.data);

  /// Create Microcycles Row from a [data] map
  factory MicrocyclesRow.fromJson(Map<String, dynamic> data) =>
      MicrocyclesRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => MicrocyclesTable();

  /// Microciclo Id field name
  static const String microcicloIdField = 'microciclo_id';

  /// Microciclo Id
  String get microcicloId =>
      getField<String>(microcicloIdField, defaultValue: '')!;
  set microcicloId(String value) => setField<String>(microcicloIdField, value);

  /// Programma Id field name
  static const String programmaIdField = 'programma_id';

  /// Programma Id
  String get programmaId => getField<String>(programmaIdField)!;
  set programmaId(String value) => setField<String>(programmaIdField, value);

  /// Titolo field name
  static const String titoloField = 'titolo';

  /// Titolo
  String get titolo => getField<String>(titoloField)!;
  set titolo(String value) => setField<String>(titoloField, value);

  /// Data Inizio field name
  static const String dataInizioField = 'data_inizio';

  /// Data Inizio
  DateTime get dataInizio => getField<DateTime>(dataInizioField)!;
  set dataInizio(DateTime value) => setField<DateTime>(dataInizioField, value);

  /// Data Fine field name
  static const String dataFineField = 'data_fine';

  /// Data Fine
  DateTime get dataFine => getField<DateTime>(dataFineField)!;
  set dataFine(DateTime value) => setField<DateTime>(dataFineField, value);

  /// Descrizione field name
  static const String descrizioneField = 'descrizione';

  /// Descrizione
  String? get descrizione => getField<String>(descrizioneField);
  set descrizione(String? value) => setField<String>(descrizioneField, value);

  /// Make a copy of the current [MicrocyclesRow]
  /// overriding the provided fields
  MicrocyclesRow copyWith({
    String? programmaId,
    String? titolo,
    DateTime? dataInizio,
    DateTime? dataFine,
    String? microcicloId,
    String? descrizione,
  }) =>
      MicrocyclesRow.fromJson({
        'programma_id': supaSerialize(programmaId) ?? data['programma_id'],
        'titolo': supaSerialize(titolo) ?? data['titolo'],
        'data_inizio': supaSerialize(dataInizio) ?? data['data_inizio'],
        'data_fine': supaSerialize(dataFine) ?? data['data_fine'],
        'microciclo_id': supaSerialize(microcicloId) ?? data['microciclo_id'],
        'descrizione': supaSerialize(descrizione) ?? data['descrizione'],
      });
}

/// Date: 2025-06-24 13:16:53.342121
