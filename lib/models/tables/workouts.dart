//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Workouts Table
class WorkoutsTable extends SupabaseTable<WorkoutsRow> {
  /// Table Name
  @override
  String get tableName => 'workouts';

  /// Create a [WorkoutsRow] from the [data] provided
  @override
  WorkoutsRow createRow(Map<String, dynamic> data) =>
      WorkoutsRow.fromJson(data);
}

/// Workouts Row
class WorkoutsRow extends SupabaseDataRow {
  /// Workouts Row
  WorkoutsRow({
    required String microcicloId,
    required String titolo,
    required DateTime dataSeduta,
    String? allenamentoId,
    String? note,
    String? stato,
  }) : super({
          'microciclo_id': supaSerialize(microcicloId),
          'titolo': supaSerialize(titolo),
          'data_seduta': supaSerialize(dataSeduta),
          if (allenamentoId != null)
            'allenamento_id': supaSerialize(allenamentoId),
          if (note != null) 'note': supaSerialize(note),
          if (stato != null) 'stato': supaSerialize(stato),
        });

  /// Workouts Row
  const WorkoutsRow._(super.data);

  /// Create Workouts Row from a [data] map
  factory WorkoutsRow.fromJson(Map<String, dynamic> data) =>
      WorkoutsRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => WorkoutsTable();

  /// Allenamento Id field name
  static const String allenamentoIdField = 'allenamento_id';

  /// Allenamento Id
  String get allenamentoId =>
      getField<String>(allenamentoIdField, defaultValue: '')!;
  set allenamentoId(String value) =>
      setField<String>(allenamentoIdField, value);

  /// Microciclo Id field name
  static const String microcicloIdField = 'microciclo_id';

  /// Microciclo Id
  String get microcicloId => getField<String>(microcicloIdField)!;
  set microcicloId(String value) => setField<String>(microcicloIdField, value);

  /// Titolo field name
  static const String titoloField = 'titolo';

  /// Titolo
  String get titolo => getField<String>(titoloField)!;
  set titolo(String value) => setField<String>(titoloField, value);

  /// Data Seduta field name
  static const String dataSedutaField = 'data_seduta';

  /// Data Seduta
  DateTime get dataSeduta => getField<DateTime>(dataSedutaField)!;
  set dataSeduta(DateTime value) => setField<DateTime>(dataSedutaField, value);

  /// Note field name
  static const String noteField = 'note';

  /// Note
  String? get note => getField<String>(noteField);
  set note(String? value) => setField<String>(noteField, value);

  /// Stato field name
  static const String statoField = 'stato';

  /// Stato
  String get stato => getField<String>(statoField, defaultValue: 'planned')!;
  set stato(String value) => setField<String>(statoField, value);

  /// Make a copy of the current [WorkoutsRow]
  /// overriding the provided fields
  WorkoutsRow copyWith({
    String? microcicloId,
    String? titolo,
    DateTime? dataSeduta,
    String? allenamentoId,
    String? note,
    String? stato,
  }) =>
      WorkoutsRow.fromJson({
        'microciclo_id': supaSerialize(microcicloId) ?? data['microciclo_id'],
        'titolo': supaSerialize(titolo) ?? data['titolo'],
        'data_seduta': supaSerialize(dataSeduta) ?? data['data_seduta'],
        'allenamento_id':
            supaSerialize(allenamentoId) ?? data['allenamento_id'],
        'note': supaSerialize(note) ?? data['note'],
        'stato': supaSerialize(stato) ?? data['stato'],
      });
}

/// Date: 2025-06-24 13:16:53.359124
