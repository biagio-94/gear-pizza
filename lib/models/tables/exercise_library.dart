//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Exercise Library Table
class ExerciseLibraryTable extends SupabaseTable<ExerciseLibraryRow> {
  /// Table Name
  @override
  String get tableName => 'exercise_library';

  /// Create a [ExerciseLibraryRow] from the [data] provided
  @override
  ExerciseLibraryRow createRow(Map<String, dynamic> data) =>
      ExerciseLibraryRow.fromJson(data);
}

/// Exercise Library Row
class ExerciseLibraryRow extends SupabaseDataRow {
  /// Exercise Library Row
  ExerciseLibraryRow({
    required String nomeEsercizio,
    required String categoriaId,
    String? esercizioId,
    String? descrizione,
    String? muscoliCoinvolti,
    String? mediaUrl,
    String? instructions,
    String? difficulty,
    String? equipment,
    String? exerciseType,
  }) : super({
          'nome_esercizio': supaSerialize(nomeEsercizio),
          'categoria_id': supaSerialize(categoriaId),
          if (esercizioId != null) 'esercizio_id': supaSerialize(esercizioId),
          if (descrizione != null) 'descrizione': supaSerialize(descrizione),
          if (muscoliCoinvolti != null)
            'muscoli_coinvolti': supaSerialize(muscoliCoinvolti),
          if (mediaUrl != null) 'media_url': supaSerialize(mediaUrl),
          if (instructions != null) 'instructions': supaSerialize(instructions),
          if (difficulty != null) 'difficulty': supaSerialize(difficulty),
          if (equipment != null) 'equipment': supaSerialize(equipment),
          if (exerciseType != null)
            'exercise_type': supaSerialize(exerciseType),
        });

  /// Exercise Library Row
  const ExerciseLibraryRow._(super.data);

  /// Create Exercise Library Row from a [data] map
  factory ExerciseLibraryRow.fromJson(Map<String, dynamic> data) =>
      ExerciseLibraryRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => ExerciseLibraryTable();

  /// Esercizio Id field name
  static const String esercizioIdField = 'esercizio_id';

  /// Esercizio Id
  String get esercizioId =>
      getField<String>(esercizioIdField, defaultValue: '')!;
  set esercizioId(String value) => setField<String>(esercizioIdField, value);

  /// Nome Esercizio field name
  static const String nomeEsercizioField = 'nome_esercizio';

  /// Nome Esercizio
  String get nomeEsercizio => getField<String>(nomeEsercizioField)!;
  set nomeEsercizio(String value) =>
      setField<String>(nomeEsercizioField, value);

  /// Descrizione field name
  static const String descrizioneField = 'descrizione';

  /// Descrizione
  String? get descrizione => getField<String>(descrizioneField);
  set descrizione(String? value) => setField<String>(descrizioneField, value);

  /// Muscoli Coinvolti field name
  static const String muscoliCoinvoltiField = 'muscoli_coinvolti';

  /// Muscoli Coinvolti
  String? get muscoliCoinvolti => getField<String>(muscoliCoinvoltiField);
  set muscoliCoinvolti(String? value) =>
      setField<String>(muscoliCoinvoltiField, value);

  /// Media Url field name
  static const String mediaUrlField = 'media_url';

  /// Media Url
  String? get mediaUrl => getField<String>(mediaUrlField);
  set mediaUrl(String? value) => setField<String>(mediaUrlField, value);

  /// Categoria Id field name
  static const String categoriaIdField = 'categoria_id';

  /// Categoria Id
  String get categoriaId => getField<String>(categoriaIdField)!;
  set categoriaId(String value) => setField<String>(categoriaIdField, value);

  /// Instructions field name
  static const String instructionsField = 'instructions';

  /// Instructions
  String? get instructions => getField<String>(instructionsField);
  set instructions(String? value) => setField<String>(instructionsField, value);

  /// Difficulty field name
  static const String difficultyField = 'difficulty';

  /// Difficulty
  String? get difficulty => getField<String>(difficultyField);
  set difficulty(String? value) => setField<String>(difficultyField, value);

  /// Equipment field name
  static const String equipmentField = 'equipment';

  /// Equipment
  String? get equipment => getField<String>(equipmentField);
  set equipment(String? value) => setField<String>(equipmentField, value);

  /// Exercise Type field name
  static const String exerciseTypeField = 'exercise_type';

  /// Exercise Type
  String? get exerciseType => getField<String>(exerciseTypeField);
  set exerciseType(String? value) => setField<String>(exerciseTypeField, value);

  /// Make a copy of the current [ExerciseLibraryRow]
  /// overriding the provided fields
  ExerciseLibraryRow copyWith({
    String? nomeEsercizio,
    String? categoriaId,
    String? esercizioId,
    String? descrizione,
    String? muscoliCoinvolti,
    String? mediaUrl,
    String? instructions,
    String? difficulty,
    String? equipment,
    String? exerciseType,
  }) =>
      ExerciseLibraryRow.fromJson({
        'nome_esercizio':
            supaSerialize(nomeEsercizio) ?? data['nome_esercizio'],
        'categoria_id': supaSerialize(categoriaId) ?? data['categoria_id'],
        'esercizio_id': supaSerialize(esercizioId) ?? data['esercizio_id'],
        'descrizione': supaSerialize(descrizione) ?? data['descrizione'],
        'muscoli_coinvolti':
            supaSerialize(muscoliCoinvolti) ?? data['muscoli_coinvolti'],
        'media_url': supaSerialize(mediaUrl) ?? data['media_url'],
        'instructions': supaSerialize(instructions) ?? data['instructions'],
        'difficulty': supaSerialize(difficulty) ?? data['difficulty'],
        'equipment': supaSerialize(equipment) ?? data['equipment'],
        'exercise_type': supaSerialize(exerciseType) ?? data['exercise_type'],
      });
}

/// Date: 2025-06-24 13:16:53.333385
