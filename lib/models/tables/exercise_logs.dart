//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Exercise Logs Table
class ExerciseLogsTable extends SupabaseTable<ExerciseLogsRow> {
  /// Table Name
  @override
  String get tableName => 'exercise_logs';

  /// Create a [ExerciseLogsRow] from the [data] provided
  @override
  ExerciseLogsRow createRow(Map<String, dynamic> data) =>
      ExerciseLogsRow.fromJson(data);
}

/// Exercise Logs Row
class ExerciseLogsRow extends SupabaseDataRow {
  /// Exercise Logs Row
  ExerciseLogsRow({
    required String esercizioAllId,
    required DateTime dataEsecuzione,
    required int serieCompletate,
    required String ripetizioniEffettive,
    String? logId,
    double? caricoEffettivo,
    String? note,
  }) : super({
          'esercizio_all_id': supaSerialize(esercizioAllId),
          'data_esecuzione': supaSerialize(dataEsecuzione),
          'serie_completate': supaSerialize(serieCompletate),
          'ripetizioni_effettive': supaSerialize(ripetizioniEffettive),
          if (logId != null) 'log_id': supaSerialize(logId),
          if (caricoEffettivo != null)
            'carico_effettivo': supaSerialize(caricoEffettivo),
          if (note != null) 'note': supaSerialize(note),
        });

  /// Exercise Logs Row
  const ExerciseLogsRow._(super.data);

  /// Create Exercise Logs Row from a [data] map
  factory ExerciseLogsRow.fromJson(Map<String, dynamic> data) =>
      ExerciseLogsRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => ExerciseLogsTable();

  /// Log Id field name
  static const String logIdField = 'log_id';

  /// Log Id
  String get logId => getField<String>(logIdField, defaultValue: '')!;
  set logId(String value) => setField<String>(logIdField, value);

  /// Esercizio All Id field name
  static const String esercizioAllIdField = 'esercizio_all_id';

  /// Esercizio All Id
  String get esercizioAllId => getField<String>(esercizioAllIdField)!;
  set esercizioAllId(String value) =>
      setField<String>(esercizioAllIdField, value);

  /// Data Esecuzione field name
  static const String dataEsecuzioneField = 'data_esecuzione';

  /// Data Esecuzione
  DateTime get dataEsecuzione => getField<DateTime>(dataEsecuzioneField)!;
  set dataEsecuzione(DateTime value) =>
      setField<DateTime>(dataEsecuzioneField, value);

  /// Serie Completate field name
  static const String serieCompletateField = 'serie_completate';

  /// Serie Completate
  int get serieCompletate => getField<int>(serieCompletateField)!;
  set serieCompletate(int value) => setField<int>(serieCompletateField, value);

  /// Ripetizioni Effettive field name
  static const String ripetizioniEffettiveField = 'ripetizioni_effettive';

  /// Ripetizioni Effettive
  String get ripetizioniEffettive =>
      getField<String>(ripetizioniEffettiveField)!;
  set ripetizioniEffettive(String value) =>
      setField<String>(ripetizioniEffettiveField, value);

  /// Carico Effettivo field name
  static const String caricoEffettivoField = 'carico_effettivo';

  /// Carico Effettivo
  double? get caricoEffettivo => getField<double>(caricoEffettivoField);
  set caricoEffettivo(double? value) =>
      setField<double>(caricoEffettivoField, value);

  /// Note field name
  static const String noteField = 'note';

  /// Note
  String? get note => getField<String>(noteField);
  set note(String? value) => setField<String>(noteField, value);

  /// Make a copy of the current [ExerciseLogsRow]
  /// overriding the provided fields
  ExerciseLogsRow copyWith({
    String? esercizioAllId,
    DateTime? dataEsecuzione,
    int? serieCompletate,
    String? ripetizioniEffettive,
    String? logId,
    double? caricoEffettivo,
    String? note,
  }) =>
      ExerciseLogsRow.fromJson({
        'esercizio_all_id':
            supaSerialize(esercizioAllId) ?? data['esercizio_all_id'],
        'data_esecuzione':
            supaSerialize(dataEsecuzione) ?? data['data_esecuzione'],
        'serie_completate':
            supaSerialize(serieCompletate) ?? data['serie_completate'],
        'ripetizioni_effettive': supaSerialize(ripetizioniEffettive) ??
            data['ripetizioni_effettive'],
        'log_id': supaSerialize(logId) ?? data['log_id'],
        'carico_effettivo':
            supaSerialize(caricoEffettivo) ?? data['carico_effettivo'],
        'note': supaSerialize(note) ?? data['note'],
      });
}

/// Date: 2025-06-24 13:16:53.334956
