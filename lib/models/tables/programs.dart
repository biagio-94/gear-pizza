//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Programs Table
class ProgramsTable extends SupabaseTable<ProgramsRow> {
  /// Table Name
  @override
  String get tableName => 'programs';

  /// Create a [ProgramsRow] from the [data] provided
  @override
  ProgramsRow createRow(Map<String, dynamic> data) =>
      ProgramsRow.fromJson(data);
}

/// Programs Row
class ProgramsRow extends SupabaseDataRow {
  /// Programs Row
  ProgramsRow({
    required String userId,
    required String createdBy,
    required String titolo,
    required DateTime dataInizio,
    String? programmaId,
    String? descrizione,
    DateTime? dataFine,
    String? note,
    bool? attivo,
  }) : super({
          'user_id': supaSerialize(userId),
          'created_by': supaSerialize(createdBy),
          'titolo': supaSerialize(titolo),
          'data_inizio': supaSerialize(dataInizio),
          if (programmaId != null) 'programma_id': supaSerialize(programmaId),
          if (descrizione != null) 'descrizione': supaSerialize(descrizione),
          if (dataFine != null) 'data_fine': supaSerialize(dataFine),
          if (note != null) 'note': supaSerialize(note),
          if (attivo != null) 'attivo': supaSerialize(attivo),
        });

  /// Programs Row
  const ProgramsRow._(super.data);

  /// Create Programs Row from a [data] map
  factory ProgramsRow.fromJson(Map<String, dynamic> data) =>
      ProgramsRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => ProgramsTable();

  /// Programma Id field name
  static const String programmaIdField = 'programma_id';

  /// Programma Id
  String get programmaId =>
      getField<String>(programmaIdField, defaultValue: '')!;
  set programmaId(String value) => setField<String>(programmaIdField, value);

  /// User Id field name
  static const String userIdField = 'user_id';

  /// User Id
  String get userId => getField<String>(userIdField)!;
  set userId(String value) => setField<String>(userIdField, value);

  /// Created By field name
  static const String createdByField = 'created_by';

  /// Created By
  String get createdBy => getField<String>(createdByField)!;
  set createdBy(String value) => setField<String>(createdByField, value);

  /// Titolo field name
  static const String titoloField = 'titolo';

  /// Titolo
  String get titolo => getField<String>(titoloField)!;
  set titolo(String value) => setField<String>(titoloField, value);

  /// Descrizione field name
  static const String descrizioneField = 'descrizione';

  /// Descrizione
  String? get descrizione => getField<String>(descrizioneField);
  set descrizione(String? value) => setField<String>(descrizioneField, value);

  /// Data Inizio field name
  static const String dataInizioField = 'data_inizio';

  /// Data Inizio
  DateTime get dataInizio => getField<DateTime>(dataInizioField)!;
  set dataInizio(DateTime value) => setField<DateTime>(dataInizioField, value);

  /// Data Fine field name
  static const String dataFineField = 'data_fine';

  /// Data Fine
  DateTime? get dataFine => getField<DateTime>(dataFineField);
  set dataFine(DateTime? value) => setField<DateTime>(dataFineField, value);

  /// Note field name
  static const String noteField = 'note';

  /// Note
  String? get note => getField<String>(noteField);
  set note(String? value) => setField<String>(noteField, value);

  /// Attivo field name
  static const String attivoField = 'attivo';

  /// Attivo
  bool get attivo => getField<bool>(attivoField, defaultValue: true)!;
  set attivo(bool value) => setField<bool>(attivoField, value);

  /// Make a copy of the current [ProgramsRow]
  /// overriding the provided fields
  ProgramsRow copyWith({
    String? userId,
    String? createdBy,
    String? titolo,
    DateTime? dataInizio,
    String? programmaId,
    String? descrizione,
    DateTime? dataFine,
    String? note,
    bool? attivo,
  }) =>
      ProgramsRow.fromJson({
        'user_id': supaSerialize(userId) ?? data['user_id'],
        'created_by': supaSerialize(createdBy) ?? data['created_by'],
        'titolo': supaSerialize(titolo) ?? data['titolo'],
        'data_inizio': supaSerialize(dataInizio) ?? data['data_inizio'],
        'programma_id': supaSerialize(programmaId) ?? data['programma_id'],
        'descrizione': supaSerialize(descrizione) ?? data['descrizione'],
        'data_fine': supaSerialize(dataFine) ?? data['data_fine'],
        'note': supaSerialize(note) ?? data['note'],
        'attivo': supaSerialize(attivo) ?? data['attivo'],
      });
}

/// Date: 2025-06-24 13:16:53.353900
