//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Appointments Table
class AppointmentsTable extends SupabaseTable<AppointmentsRow> {
  /// Table Name
  @override
  String get tableName => 'appointments';

  /// Create a [AppointmentsRow] from the [data] provided
  @override
  AppointmentsRow createRow(Map<String, dynamic> data) =>
      AppointmentsRow.fromJson(data);
}

/// Appointments Row
class AppointmentsRow extends SupabaseDataRow {
  /// Appointments Row
  AppointmentsRow({
    required String ptId,
    required String clientId,
    required DateTime dataOraInizio,
    required DateTime dataOraFine,
    required AppointmentType tipo,
    required AppointmentState stato,
    String? appointmentId,
    String? note,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) : super({
          'pt_id': supaSerialize(ptId),
          'client_id': supaSerialize(clientId),
          'data_ora_inizio': supaSerialize(dataOraInizio),
          'data_ora_fine': supaSerialize(dataOraFine),
          'tipo': supaSerialize(tipo),
          'stato': supaSerialize(stato),
          if (appointmentId != null)
            'appointment_id': supaSerialize(appointmentId),
          if (note != null) 'note': supaSerialize(note),
          if (createdAt != null) 'created_at': supaSerialize(createdAt),
          if (updatedAt != null) 'updated_at': supaSerialize(updatedAt),
        });

  /// Appointments Row
  const AppointmentsRow._(super.data);

  /// Create Appointments Row from a [data] map
  factory AppointmentsRow.fromJson(Map<String, dynamic> data) =>
      AppointmentsRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => AppointmentsTable();

  /// Appointment Id field name
  static const String appointmentIdField = 'appointment_id';

  /// Appointment Id
  String get appointmentId =>
      getField<String>(appointmentIdField, defaultValue: '')!;
  set appointmentId(String value) =>
      setField<String>(appointmentIdField, value);

  /// Pt Id field name
  static const String ptIdField = 'pt_id';

  /// Pt Id
  String get ptId => getField<String>(ptIdField)!;
  set ptId(String value) => setField<String>(ptIdField, value);

  /// Client Id field name
  static const String clientIdField = 'client_id';

  /// Client Id
  String get clientId => getField<String>(clientIdField)!;
  set clientId(String value) => setField<String>(clientIdField, value);

  /// Data Ora Inizio field name
  static const String dataOraInizioField = 'data_ora_inizio';

  /// Data Ora Inizio
  DateTime get dataOraInizio => getField<DateTime>(dataOraInizioField)!;
  set dataOraInizio(DateTime value) =>
      setField<DateTime>(dataOraInizioField, value);

  /// Data Ora Fine field name
  static const String dataOraFineField = 'data_ora_fine';

  /// Data Ora Fine
  DateTime get dataOraFine => getField<DateTime>(dataOraFineField)!;
  set dataOraFine(DateTime value) =>
      setField<DateTime>(dataOraFineField, value);

  /// Tipo field name
  static const String tipoField = 'tipo';

  /// Tipo
  AppointmentType get tipo =>
      getField<AppointmentType>(tipoField, enumValues: AppointmentType.values)!;
  set tipo(AppointmentType value) =>
      setField<AppointmentType>(tipoField, value);

  /// Stato field name
  static const String statoField = 'stato';

  /// Stato
  AppointmentState get stato => getField<AppointmentState>(statoField,
      enumValues: AppointmentState.values)!;
  set stato(AppointmentState value) =>
      setField<AppointmentState>(statoField, value);

  /// Note field name
  static const String noteField = 'note';

  /// Note
  String? get note => getField<String>(noteField);
  set note(String? value) => setField<String>(noteField, value);

  /// Created At field name
  static const String createdAtField = 'created_at';

  /// Created At
  DateTime get createdAt =>
      getField<DateTime>(createdAtField, defaultValue: DateTime.now())!;
  set createdAt(DateTime value) => setField<DateTime>(createdAtField, value);

  /// Updated At field name
  static const String updatedAtField = 'updated_at';

  /// Updated At
  DateTime get updatedAt =>
      getField<DateTime>(updatedAtField, defaultValue: DateTime.now())!;
  set updatedAt(DateTime value) => setField<DateTime>(updatedAtField, value);

  /// Make a copy of the current [AppointmentsRow]
  /// overriding the provided fields
  AppointmentsRow copyWith({
    String? ptId,
    String? clientId,
    DateTime? dataOraInizio,
    DateTime? dataOraFine,
    AppointmentType? tipo,
    AppointmentState? stato,
    String? appointmentId,
    String? note,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) =>
      AppointmentsRow.fromJson({
        'pt_id': supaSerialize(ptId) ?? data['pt_id'],
        'client_id': supaSerialize(clientId) ?? data['client_id'],
        'data_ora_inizio':
            supaSerialize(dataOraInizio) ?? data['data_ora_inizio'],
        'data_ora_fine': supaSerialize(dataOraFine) ?? data['data_ora_fine'],
        'tipo': supaSerialize(tipo) ?? data['tipo'],
        'stato': supaSerialize(stato) ?? data['stato'],
        'appointment_id':
            supaSerialize(appointmentId) ?? data['appointment_id'],
        'note': supaSerialize(note) ?? data['note'],
        'created_at': supaSerialize(createdAt) ?? data['created_at'],
        'updated_at': supaSerialize(updatedAt) ?? data['updated_at'],
      });
}

/// Date: 2025-06-24 13:16:53.331032
